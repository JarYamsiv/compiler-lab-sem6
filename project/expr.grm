(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF
%verbose
%pure
%name Expr

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE

    |IS

    | BACKTICK

    | IDENTIFIER of string
    | DIRECTC of string
    | EQUALSIGN
    | SEMICOLON
    | COLON
    | LCURL   | RCURL
    | LPAREN  | RPAREN
    | LSQUARE | RSQUARE
    | IF      | ELSE
    | WHILE
    | TRUE | FALSE
    | EQ | GT | LT | AND | OR
    | FUN
    | RET
    | BEG | END

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | START of Ast.ProgramElement list
       | PROGRAM of Ast.ProgramElement list
       | PROGRAMELEM of Ast.ProgramElement
       | STATEMENT of Ast.Statement
       | STATEMENTS of Ast.Statement list
       | CONDITION of Ast.Condition

%noshift EOF

(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)
%left EQ LT GT
%left OR
%left AND
%left SEMICOLON
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)



(* The type that captures position in the input *)
%pos int

%%

START   : PROGRAM                (PROGRAM)

PROGRAM :   PROGRAMELEM PROGRAM  (PROGRAMELEM::PROGRAM)
        |   PROGRAMELEM           ([PROGRAMELEM])

STATEMENT:IDENTIFIER EQUALSIGN EXP  (Ast.As (IDENTIFIER,EXP,Ast.INT,false))
          | IDENTIFIER EQUALSIGN CONDITION (Ast.BAs (IDENTIFIER,CONDITION,false))
          | IDENTIFIER IS IDENTIFIER        (Ast.GAs (IDENTIFIER1,IDENTIFIER2))
          |IDENTIFIER LPAREN RPAREN  (Ast.FnCl IDENTIFIER)
          |RET EXP                    (Ast.Ret EXP)
          |RET CONDITION              (Ast.BRet CONDITION)
          | DIRECTC                   (Ast.DirectC DIRECTC)
          |IF  CONDITION  BEG STATEMENTS END (Ast.If (CONDITION,STATEMENTS))
          |IF  CONDITION  BEG STATEMENTS END ELSE BEG STATEMENTS END (Ast.IfEl (CONDITION,STATEMENTS1,STATEMENTS2))
          |WHILE CONDITION BEG STATEMENTS END (Ast.While (CONDITION,STATEMENTS))


STATEMENTS:                                ([]) 
          |STATEMENT STATEMENTS  (STATEMENT::STATEMENTS)

          





PROGRAMELEM : FUN IDENTIFIER LPAREN RPAREN BEG 
            STATEMENTS 
            END(Ast.Fn (Ast.Fun (IDENTIFIER,STATEMENTS,Ast.VOID)))

CONDITION : TRUE                        ( Ast.BConst Ast.TRUE)
          | FALSE                       ( Ast.BConst Ast.FALSE)
          | CONDITION AND CONDITION     ( Ast.nd CONDITION1 CONDITION2)
          | CONDITION OR CONDITION      ( Ast.or CONDITION1 CONDITION2)
          | LPAREN CONDITION RPAREN     ( CONDITION )
          | EXP LT EXP                  ( Ast.lt EXP1 EXP2)
          | EXP GT EXP                  ( Ast.gt EXP1 EXP2)
          | EXP EQ EXP                  ( Ast.eq EXP1 EXP2)
          | BACKTICK IDENTIFIER BACKTICK          (Ast.BVar IDENTIFIER)
          

EXP     : CONST                ( Ast.Const (CONST)     )
        | IDENTIFIER           ( Ast.EVar (IDENTIFIER) )
        | IDENTIFIER LSQUARE EXP RSQUARE (Ast.ARVar (IDENTIFIER,EXP))
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
        | LPAREN EXP RPAREN    ( EXP )
	      | EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	      | EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
