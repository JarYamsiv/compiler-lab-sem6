(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF
%verbose
%pure
%name Expr

(* The terminals or tokens of the language *)
%term CONST of int
    | TAB 
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | IDENTIFIER of string
    | EQUALSIGN
    | SEMICOLON
    | COLON
    | LCURL   | RCURL
    | LPAREN  | RPAREN
    | LSQUARE | RSQUARE
    | IF      | ELSE
    | EQ | GT | LT | AND | OR
    | FUN

(* The nonterminals of the language *)
%nonterm PROGRAM of Ast.ProgramElement_t list
       | PROGRAMELEM of Ast.ProgramElement_t
       | INDENT of int
       | STATEMENT of Ast.Statement_t


%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)
%left EQ LT GT
%left OR
%left AND
%left SEMICOLON
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM :   PROGRAMELEM PROGRAM   (PROGRAMELEM::PROGRAM)
        |   PROGRAMELEM           ([PROGRAMELEM])

PROGRAMELEM : STATEMENT           (Ast.C_Statement STATEMENT)

STATEMENT: INDENT IDENTIFIER      (Ast.C_St_Identifier (INDENT,IDENTIFIER))
         | INDENT IDENTIFIER LPAREN RPAREN (Ast.C_St_FunCall (INDENT,IDENTIFIER))

INDENT : TAB INDENT                (INDENT+1)
       |                           (0)





