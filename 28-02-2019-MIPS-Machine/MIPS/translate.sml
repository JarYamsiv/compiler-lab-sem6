structure Translate =
struct

val red = "\u001b[31;1m"
val green = "\u001b[32;1m"
val white = "\u001b[37;1m"
val yellow = "\u001b[33;1m"
val grey = "\u001b[30;1m"
val reset = "\u001b[0m"

exception undef

structure SymTabKey = 
struct
	type ord_key = Atom.atom
	type tab_content = int
	val compare = Atom.compare
end

structure SymTable = MakeSymTable(SymTabKey)




(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(**************************************************COMPILE  EXPRESSION*****************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)


fun compileExpr (Ast.Const x )         = ()

  | compileExpr (Ast.EVar  x )		   = ()	
  
  | compileExpr (Ast.ARVar (a,e) )	 	= let
										  	val e = compileExpr e
										  in
										  	()
										  end

  | compileExpr (Ast.Op (x, oper, y))  = let
  											val e1 = compileExpr x
  										 	val binop = binop_ast_to_tree oper
  										 	val e2 = compileExpr y 
  										 in
  										 	T()
  										 end





(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(***************************************************COMPILE  CONDITION*****************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)






(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(*****************************************COMPILE STATEMENT AND STATEMENTS*************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)


fun    compileStatement (Ast.As (x,exp))	  		=  ()





	| compileStatement (Ast.FnCl x)		  		  =  ()
	| compileStatement (Ast.If (c,sl))			  =	()	
	| compileStatement (Ast.IfEl (c,sl1,sl2))	  =	()



and  compileStatements  ((x :: xs))	  = ((compileStatement x );(compileStatements (xs)))
	|compileStatements  ([])	   		  = ()




(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(************************************************COMPILE FUNCTION**********************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)

fun compileFun(Ast.Fun (x,g))		  =  (compileStatements g)




(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(***************************************************COMPILE PROGRAM ELEMENT************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)

fun   compileElem (Ast.St statement)	  = compileStatement statement 	
	| compileElem (Ast.Fn function)       = (compileFun  function ) 





(**************************************************************************************************************************************)
(**************************************************************************************************************************************)
(**************************************************COMPILE*****************************************************************************)
(**************************************************************************************************************************************)
(**************************************************************************************************************************************)

fun compile []        = ()
  | compile (x :: xs) = ((compileElem x);(compile xs))

end
