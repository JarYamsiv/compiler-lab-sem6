(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF
%verbose
%pure
%name Expr

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | IDENTIFIER of string
    | EQUALSIGN

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.Expr list
       | ASSIGNMENT of Ast.Expr
       | STATEMENTS of Ast.Expr list
       | STATEMENT of Ast.Expr

%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM :   STATEMENTS            ( STATEMENTS )

STATEMENTS:STATEMENT            ([STATEMENT])
          |STATEMENT NEWLINE    ([STATEMENT])
          |STATEMENT NEWLINE STATEMENTS (STATEMENT::STATEMENTS)
          

STATEMENT:IDENTIFIER            (Ast.Id IDENTIFIER)
          |EXP                  (EXP)
          |IDENTIFIER EQUALSIGN EXP(Ast.As (IDENTIFIER,EXP))


EXP     : CONST                ( Ast.Const CONST     )
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
