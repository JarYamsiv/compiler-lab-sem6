(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

%eop EOF
%verbose
%pure
%name Expr

(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | IDENTIFIER of string
    | EQUALSIGN
    | SEMICOLON
    | COLON
    | LCURL   | RCURL
    | LPAREN  | RPAREN
    | LSQUARE | RSQUARE
    | IF      | ELSE
    | EQ | GT | LT | AND | OR
    | FUN

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | PROGRAM of Ast.ProgramElement list
       | PROGRAMELEM of Ast.ProgramElement
       | STATEMENT of Ast.Statement
       | STATEMENTS of Ast.Statement list
       | CODEBLOCK of Ast.CodeBlock
       | CODEBLOCKS of Ast.CodeBlock list
       | CONDITION of Ast.Condition

%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)
%left SEMICOLON
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL         (* higher than + and -            *)

(* The type that captures position in the input *)
%pos int

%%

PROGRAM :   PROGRAMELEM PROGRAM  (PROGRAMELEM::PROGRAM)
        |   PROGRAMELEM           ([PROGRAMELEM])

STATEMENT:IDENTIFIER                  (Ast.Id IDENTIFIER)
          |IDENTIFIER EQUALSIGN EXP  (Ast.As (IDENTIFIER,EXP))

STATEMENTS:STATEMENT SEMICOLON             ([STATEMENT]) 
          |STATEMENT SEMICOLON STATEMENTS  (STATEMENT::STATEMENTS)

CODEBLOCK: STATEMENTS                (Ast.Stlist STATEMENTS)
          |IF LPAREN CONDITION RPAREN LCURL CODEBLOCKS RCURL (Ast.Cblock ("ee",CODEBLOCKS))

CODEBLOCKS:CODEBLOCK CODEBLOCKS    (CODEBLOCK::CODEBLOCKS)
          |CODEBLOCK                ([CODEBLOCK])



PROGRAMELEM : STATEMENT SEMICOLON  (Ast.St STATEMENT)
            | FUN IDENTIFIER LPAREN RPAREN LCURL 
            CODEBLOCKS 
            RCURL(Ast.Fn (Ast.Fun (IDENTIFIER,CODEBLOCKS)))

CONDITION : CONST                       ( Ast.CConst CONST)
          | CONDITION EQ CONDITION      ( Ast.eq CONDITION1 CONDITION2)
          

EXP     : CONST                ( Ast.Const CONST     )
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
        | LPAREN EXP RPAREN    ( EXP )
	      | EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	      | EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
